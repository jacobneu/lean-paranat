import combinatorics.quiver.basic 
import category_theory.category.basic category_theory.functor.basic
-- import category_theory.products.basic
import category_theory.opposites
-- import category_theory.functor.fully_faithful
-- import category_theory.functor.currying
-- import category_theory.products.basic

open category_theory
open opposite


universes v v‚ÇÅ v‚ÇÇ u u‚ÇÅ u‚ÇÇ

structure predifunctor (V : Type u‚ÇÅ) [quiver.{v‚ÇÅ} V] (W : Type u‚ÇÇ) [quiver.{v‚ÇÇ} W] :=
(obj [] : V ‚Üí V ‚Üí W)
(map_neg : Œ† {I‚ÇÄ I‚ÇÅ : V} (J : V), (I‚ÇÄ ‚ü∂ I‚ÇÅ) ‚Üí (obj I‚ÇÅ J ‚ü∂ obj I‚ÇÄ J))
(map_pos : Œ† (I : V) {J‚ÇÄ J‚ÇÅ : V}, (J‚ÇÄ ‚ü∂ J‚ÇÅ) ‚Üí (obj I J‚ÇÄ ‚ü∂ obj I J‚ÇÅ))


namespace predifunctor

@[ext]
lemma ext {V : Type u} [quiver.{v‚ÇÅ} V] {W : Type u‚ÇÇ} [quiver.{v‚ÇÇ} W]
  {F G : predifunctor V W}
  (h_obj : ‚àÄ I J, F.obj I J = G.obj I J)
  (h_map_neg : ‚àÄ (I‚ÇÄ I‚ÇÅ J : V) (i‚ÇÇ : I‚ÇÄ ‚ü∂ I‚ÇÅ),
           F.map_neg J i‚ÇÇ = eq.rec_on (h_obj I‚ÇÄ J).symm (eq.rec_on (h_obj I‚ÇÅ J).symm (G.map_neg J i‚ÇÇ)))
  (h_map_pos : ‚àÄ (I J‚ÇÄ J‚ÇÅ : V) (j‚ÇÇ : J‚ÇÄ ‚ü∂ J‚ÇÅ),
           F.map_pos I j‚ÇÇ = eq.rec_on (h_obj I J‚ÇÅ).symm (eq.rec_on (h_obj I J‚ÇÄ).symm (G.map_pos I j‚ÇÇ))) : F = G :=
begin
  cases F with F_obj _, cases G with G_obj _,
  obtain rfl : F_obj = G_obj, by { ext X, apply h_obj },
  congr,
  funext I‚ÇÄ I‚ÇÅ J i‚ÇÇ,
  simpa using h_map_neg I‚ÇÄ I‚ÇÅ J i‚ÇÇ,
  funext I J‚ÇÄ J‚ÇÅ j‚ÇÇ,
  simpa using h_map_pos I J‚ÇÄ J‚ÇÅ j‚ÇÇ,
end


-- @[simps]
-- def id (V : Type*) [quiver V] : prefunctor V V :=
-- { obj := id,
--   map := Œª X Y f, f, }

-- instance (V : Type*) [quiver V] : inhabited (prefunctor V V) := ‚ü®id V‚ü©

-- def from_prefunctor_pos {V : Type u‚ÇÅ} [quiver.{v‚ÇÅ} V] {W : Type u‚ÇÇ} [quiver.{v‚ÇÇ} W] (F : prefunctor V W) : predifunctor V W :=
-- { 
--   obj := Œª I J, F.obj J, 
--   map_pos := Œª I J‚ÇÄ J‚ÇÅ j‚ÇÇ, F.map j‚ÇÇ,
--   map_neg := Œª I‚ÇÄ I‚ÇÅ J i‚ÇÇ, id
-- }

end predifunctor



structure difunctor (C : Type u‚ÇÅ) [category.{v‚ÇÅ} C] (D : Type u‚ÇÇ) [category.{v‚ÇÇ} D]
  extends predifunctor C D : Type (max v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ) :=
(map_pos_id'   : ‚àÄ (I J : C), map_pos I (ùüô J) = ùüô (obj I J) . obviously)
(map_pos_comp' : ‚àÄ {I J K L : C} (k : J ‚ü∂ K) (l : K ‚ü∂ L), map_pos I (k ‚â´ l) = (map_pos I k) ‚â´ (map_pos I l) . obviously)
(map_neg_id'   : ‚àÄ (I J : C), map_neg J (ùüô I) = ùüô (obj I J) . obviously)
(map_neg_comp' : ‚àÄ {G H I J : C} (h : G ‚ü∂ H) (i : H ‚ü∂ I), map_neg J (h ‚â´ i) = (map_neg J i) ‚â´ (map_neg J h) . obviously)
(map_both : ‚àÄ {I‚ÇÄ I‚ÇÅ J‚ÇÄ J‚ÇÅ : C} (i‚ÇÇ : I‚ÇÄ ‚ü∂ I‚ÇÅ) (j‚ÇÇ : J‚ÇÄ ‚ü∂ J‚ÇÅ),  (map_neg _ i‚ÇÇ) ‚â´ (map_pos _ j‚ÇÇ) =  (map_pos _ j‚ÇÇ) ‚â´ (map_neg _ i‚ÇÇ) . obviously)

/-- The prefunctor between the underlying quivers. -/
add_decl_doc difunctor.to_predifunctor


infixr ` ¬±‚•§ `:26 := difunctor 

restate_axiom difunctor.map_pos_id'
attribute [simp] difunctor.map_pos_id
restate_axiom difunctor.map_neg_id'
attribute [simp] difunctor.map_neg_id
restate_axiom difunctor.map_pos_comp'
attribute [simp] difunctor.map_pos_comp
restate_axiom difunctor.map_neg_comp'
attribute [simp] difunctor.map_neg_comp

namespace difunctor

section 
variables {C : Type u‚ÇÅ} [category.{v‚ÇÅ} C] (D : Type u‚ÇÇ) [category.{v‚ÇÇ} D]


def dummy_neg (Œì : C ‚•§ D) : C ¬±‚•§ D :=
{
  obj := Œª _, Œì.obj,
  map_pos := Œª _ J‚ÇÄ J‚ÇÅ j‚ÇÇ, Œì.map j‚ÇÇ,
  map_neg := Œª _ _ J _, ùüô (Œì.obj J) 
}
def dummy_pos (Œì : C·µí·µñ ‚•§ D) : C ¬±‚•§ D :=
{
  obj := Œª I _, Œì.obj (op I),
  map_pos := Œª I _ _ _, ùüô (Œì.obj (op I)),
  map_neg := Œª I‚ÇÄ I‚ÇÅ _ i‚ÇÇ, Œì.map i‚ÇÇ.op 
}

end
end difunctor

